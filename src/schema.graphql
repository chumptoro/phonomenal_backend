# import * from './generated/prisma.graphql' 

type SuccessMessage {
	message: String
}

type Mutation {
	createItem(title: String, description: String, price: Int,
	image: String, largeImage: String): Item!

	updateItem(id: ID!, title: String, description: String, price: Int): Item!
	
	addOrderItemFromMenu(dish_id: ID, quantity:  Int, special_instruction: String, price: Float, dish_name: String, dish: DishWhereUniqueInput): OrderItem!

  reviseOrderItem(id: ID, quantity: Int, special_instruction: String, price: Float): OrderItem

 	removeOrderItem(id: ID): OrderItem

	deleteManyOrderItems(where: OrderItemWhereInput): BatchPayload!
	
	signup(first_name: String, email: String, password: String, phone_number: String): User

	signin(email: String, password: String): User

	signout: SuccessMessage

	requestPasswordReset(email: String): SuccessMessage

	resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
}



# why? this User type is exposed to the  front end.  we do not want the front end to have access to things like password and resetToken, so are giving it a User type to graphql yoga server

type User{
  id: ID!
  first_name: String
  email: String
	phone_number: String
	delivery_address: String
  permissions: [Permission]
}

type Query {
	items: [Item]!
	item(where: ItemUpdateInput): Item!

	orderItems(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItem]!

	categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!

	dishes(where: DishWhereInput, orderBy: DishOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dish]!

	users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!

	me: User
}






